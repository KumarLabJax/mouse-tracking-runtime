// sumner2 configuration file

workDir = "/flashscratch/${USER}/nextflow-work"

params {
    /*
     * Additional Parameters for the sumner2 profile
     * These parameters generally shouldn't be manually changed by the user
     * - tracking_code_dir: prefix for the tracking code directory
     * - gaits_code_dir: prefix for the gait analysis code directory
     * - vfi_code_dir: prefix for the vfi code directory
     * - support_code_dir: prefix for the support code directory
     * - heuristic_classifier_folder: prefix for the heuristic classifier folder

     * - jabs_version: version of JABS used for the classifiers
     * - classifier_project_folders: directory containing the classifier project folders
     * - classifier_training_file_folder: directory containing the classifier training files
     * - exported_classifier_folder: directory containing the exported classifiers
     * - classifier_artifact_suffix: suffix for the classifier artifacts
     * - classifier_window_sizes: window sizes cached for use in classifiers
     * - single_mouse_classifiers: classifiers for single mouse behavior. Each classifier is described as
         behavior name (identical key used in JABS): [
             project_folder_name: folder name containing this classifier
             stitch_value: stitch value for postprocessing this classifier
             filter_value: filter value for postprocessing this classifier
         ]
     * - heuristic_classifiers: classifiers for heuristic behaviors
     * - feature_bins: number of 5-minute bins for transforming summary tables into features
     * - default_feature_input: default input for feature generation
     * - default_manual_correction_input: default input for manual correction
     */
    tracking_code_dir = "/kumar_lab_models/mouse-tracking-runtime/"
    gait_code_dir = "/gait-analysis/"
    vfi_code_dir = "/vfi/Code/"
    support_code_dir = "/mouse-tracking-runtime/support_code/"
    heuristic_classifier_folder = "/JABS-postprocess/heuristic_classifiers/"

    jabs_version = "0.18.1"
    classifier_project_folders = "/projects/kumar-lab/multimouse-pipeline/nextflow-artifacts/project_folders/"
    classifier_training_file_folder = "/projects/kumar-lab/multimouse-pipeline/nextflow-artifacts/training_files/"
    exported_classifier_folder = "/projects/kumar-lab/multimouse-pipeline/nextflow-artifacts/exported_classifiers/"
    classifier_artifact_suffix = "_classifier_v${jabs_version}.pickle"
    classifier_window_sizes = [2, 5, 10, 20, 30, 60]
    // Classifiers are described as behavior_name: project_folder
    single_mouse_classifiers = [
        "grooming": [
            "project_folder_name": "grooming",
            "stitch_value": 10*30,
            "filter_value": 3*30,
        ],
        "scratch": [
            "project_folder_name": "jabs-paper",
            "stitch_value": 5,
            "filter_value": 5,
        ],
        // "Leg_splaying": [  // Currently can't be exported successfully
        //     "project_folder_name": "ptz",
        //     "stitch_value": 5,
        //     "filter_value": 5,
        // ],
        "Side_seizure": [
            "project_folder_name": "ptz",
            "stitch_value": 5,
            "filter_value": 5,
        ],
        "Tail_jerk": [
            "project_folder_name": "ptz",
            "stitch_value": 5,
            "filter_value": 5,
        ],
        "Wild_jumping": [
            "project_folder_name": "ptz",
            "stitch_value": 5,
            "filter_value": 5,
        ],
        "Escape": [
            "project_folder_name": "jabs-vivek",
            "stitch_value": 5,
            "filter_value": 5,
        ],
        "Rearing_supported": [
            "project_folder_name": "jabs-vivek",
            "stitch_value": 5,
            "filter_value": 5,
        ],
        "Rearing_unsupported": [
            "project_folder_name": "jabs-vivek",
            "stitch_value": 5,
            "filter_value": 5,
        ],
        "Turn_left": [
            "project_folder_name": "jabs-vivek",
            "stitch_value": 5,
            "filter_value": 5,
        ],
        "Turn_right": [
            "project_folder_name": "jabs-vivek",
            "stitch_value": 5,
            "filter_value": 5,
        ],
        // "Jerk": [  // Needs to be re-exported to remove static object features (unavailable for single mouse)
        //     "project_folder_name": "social-play",
        //     "stitch_value": 1,
        //     "filter_value": 6,
        // ]
    ]
    heuristic_classifiers = ["corner", "corner_facing", "freeze", "locomotion", "periphery", "wall_facing"]

    // Number of 5-minute bins for transforming summary tables into bins
    // 1 = 5 minutes, 4 = 20 minutes, etc.
    feature_bins = [1, 4, 11]
    
    // Some default parameters for branches in the pipeline
    default_feature_input = ["${projectDir}/nextflow/default-data/DEFAULT_VIDEO.mp4", "${projectDir}/nextflow/default-data/DEFAULT_VIDEO_pose_est_v6.h5"]
    default_manual_correction_input = default_feature_input
}

apptainer {
   enabled = true
   autoMounts = true
 }

process {
    executor = 'slurm'
    module = 'slurm'

    /*
     * JAX cluster options
     */
    withLabel: "gpu" {
        queue = "gpu_a100_mig"
        clusterOptions = '-q gpu_inference --gres gpu:1 --nice=64000000'
        containerOptions = "--nv"
    }
    // Alternative GPUs available on the cluster
    withLabel: "gpu_a100" {
        queue = "gpu_a100"
        clusterOptions = '-q gpu_inference --gres gpu:1'
        containerOptions = "--nv"
    }
    withLabel: "gpu_v100" {
        queue = "gpu_v100"
        clusterOptions = '-q gpu_inference --gres gpu:1'
        containerOptions = "--nv"
    }
    withLabel: "gpu_a100_mig" {
        queue = "gpu_a100_mig"
        clusterOptions = '-q gpu_inference --gres gpu:1'
        containerOptions = "--nv"
    }
    withLabel: "cpu" {
        queue = "compute"
    }

    /*
     * Runtime options
     */
    withLabel: "tracking" {
        container = "/projects/kumar-lab/multimouse-pipeline/deployment-runtime_2025-03-05.sif"
    }
    withLabel: "jabs_classify" {
        container = "/projects/kumar-lab/multimouse-pipeline/nextflow-containers/JABS-GUI_2025-02-12_v0.18.1.sif"
    }
    withLabel: "jabs_postprocess" {
        container = "/projects/kumar-lab/multimouse-pipeline/nextflow-containers/JABS-Postprocessing-2025-03-12_69e12a7.sif"
    }
    withLabel: "jabs_table_convert" {
        container = "/projects/kumar-lab/multimouse-pipeline/nextflow-containers/support-r-code_2025-02-11.sif"
    }
    withLabel: "gait" {
        container = "/projects/kumar-lab/multimouse-pipeline/nextflow-containers/gait-pipeline-2025-01-30.sif"
    }
    withLabel: "frailty" {
        container = "/projects/kumar-lab/multimouse-pipeline/nextflow-containers/vfi-2025-02-04.sif"
    }
    withLabel: "sleap" {
        container = "/projects/kumar-lab/multimouse-pipeline/nextflow-containers/sleap-1.4.1.sif"
    }
    withLabel: "sleap_io" {
        container = "/projects/kumar-lab/multimouse-pipeline/nextflow-containers/sleap-io-0.2.0.sif"
    }
    withLabel: "rclone" {
        // executor.queueSize = 1
        container = "/projects/kumar-lab/multimouse-pipeline/rclone.sif"
    }
    withLabel: "dropbox" {
        DROPBOX_PREFIX = "labdropbox:KumarLab's shared workspace/VideoData/MDS_Tests"
    }

    /* 
     * Resource scaling labels
     * Values were estimated from test runs including a 5, 10, 20, and 30 minute test video
     * Equations are included as comments where appropriate
     * Dynamic directive assigned adds a 1.5x buffer with the following minimums:
     * - cpus: 1
     * - memory: 1GB
     * - time: 1 second
     *
     * TODO:
     * - Add handling of maximum values
     *
     * Variables in equations are:
     * - t_min: duration of the video in minutes
     * Results are in units:
     * - cpus: number of CPUs
     * - memory: GB of memory
     * - time: seconds of walltime
    */

    // Fecal boli resources
    withLabel: "r_fboli_extract" {
        cpus 1
        memory 1.GB
        // 1.5 * t_min - 3.8
        time { (1.5 * params.clip_duration / 30 / 60 * 1.5).toInteger() + '.sec' }
    }
    withLabel: "r_fboli_predict" {
        cpus 2
        memory 4.GB
        // 2.2 * t_min + 124
        time { ((2.2 * params.clip_duration / 30 / 60 + 124) * 1.5).toInteger() + '.sec' }
    }
    // Frailty Resources
    withLabel: "r_flexibility" {
        cpus 1
        // 0.0047 * t_min + 0.081
        memory { ((0.0047 * params.clip_duration / 30 / 60 + 0.081) * 1.5).toInteger() + '.GB' }
        time 5.min
    }
    withLabel: "r_rearpaw" {
        cpus 1
        // 0.0047 * t_min + 0.0801
        memory { ((0.0047 * params.clip_duration / 30 / 60 + 0.0801) * 1.5).toInteger() + '.GB' }
        time 5.min
    }
    // Gait Resources
    withLabel: "r_gait_h5" {
        cpus 1
        // 0.0009 * t_min + 0.727
        memory { ((0.0009 * params.clip_duration / 30 / 60 + 0.727) * 1.5).toInteger() + '.GB' }
        time 5.min
    }
    withLabel: "r_gait_bin" {
        cpus 1
        // 0.000005 * t_min + 0.0095
        memory { ((0.000005 * params.clip_duration / 30 / 60 + 0.0095) * 1.5).toInteger() + '.GB' }
        time 5.min
    }
    // JABS Resources
    withLabel: "r_jabs_features" {
        // This equation was not scaled for number of window sizes
        // Adding more window sizes should scale linearly, since window features (calculated once per window size)
        // are more computationally expensive than per-frame features (calculated once per pose file)
        cpus 1
        // 0.182 * t_min - 0.273 for 6 windows
        memory { ((0.182 * params.clip_duration / 30 / 60) * 1.5).toInteger() + '.GB' }
        // 129 * t_min + 142 for 6 windows
        time { ((129 * params.clip_duration / 30 / 60 + 142) * 1.5).toInteger() + '.sec' }
    }
    withLabel: "r_jabs_classify" {
        // This equation was not scaled for number of classifiers
        // Adding more classifiers will scale linearly
        cpus 1
        // 0.429 * t_min + 0 for 10 classifiers
        memory { ((0.429 * params.clip_duration / 30 / 60) * 1.5).toInteger() + '.GB' }
        // 42 * t_min - 47 for 10 classifiers
        time { ((42 * params.clip_duration / 30 / 60) * 1.5).toInteger() + '.sec' }
    }
    withLabel: "r_jabs_tablegen" {
        cpus 1
        memory 1.GB
        time 5.min
    }
    withLabel: "r_jabs_heuristic" {
        // This equation was not scaled for number of classifiers
        // Adding more classifiers will scale linearly
        cpus 1
        memory 1.GB
        // 0.111 * t_min + 37 for 6 classifiers
        time { ((0.111 * params.clip_duration / 30 / 60 + 37) * 1.5).toInteger() + '.sec' }
    }
    withLabel: "r_jabs_table_convert" {
        cpus 1
        memory 1.GB
        // 0.18 * t_min + 12
        time { ((0.18 * params.clip_duration / 30 / 60 + 12) * 1.5).toInteger() + '.sec' }
    }
    // Single Mouse Resources
    withLabel: "r_single_seg" {
        cpus 2
        // 0.051 * t_min + 1.86
        memory { ((0.051 * params.clip_duration / 30 / 60 + 1.86) * 1.5).toInteger() + '.GB' }
        // 8.73 * t_min + 24.7
        time { ((8.73 * params.clip_duration / 30 / 60 + 24.7) * 1.5).toInteger() + '.sec' }
    }
    withLabel: "r_single_keypoints" {
        // Note: This process is run before the clipping (to find the mouse entering the arena)
        // This process will scale with input video duration, but not clip duration
        // Therefore, these tasks are on the slightly higher end
        cpus 2
        memory 64.GB
        time 6.hr
    }
    withLabel: "r_single_qc" {
        cpus 1
        memory 1.GB
        time 10.min
    }
    withLabel: "r_clip_video" {
        cpus 2
        // 0.0000003 * t_min + 0.35
        memory { ((0.0000003 * params.clip_duration / 30 / 60 + 0.35) * 1.5).toInteger() + '.GB' }
        // 19.3 * t_min + 59
        time { ((19.3 * params.clip_duration / 30 / 60 + 59) * 1.5).toInteger() + '.sec' }
    }
    // Static Object Resources
    // These do not scale with clip duration
    withLabel: "r_arena_corners" {
        cpus 2
        memory 4.GB
        time 10.min
    }
    withLabel: "r_food_hopper" {
        cpus 2
        memory 4.GB
        time 10.min
    }
    witLabel: "r_lixit" {
        cpus 2
        memory 4.GB
        time 10.min
    }
    // Utility Resources
    withLabel: "r_util" {
        cpus 1
        memory 1.GB
        time 5.min
    }
    withLabel: "r_gen_vid" {
        cpus 1
        memory 1.GB
        time 1.hr
    }
}

executor {
    name = 'slurm'
    // The number of tasks the executor will handle in a parallel manner
    // TODO: This limit is set low to be a good GPU-cluster citizen. CPUs don't need to be as restricted.
    queueSize = 24
    submitRateLimit = '1 s'
    // Determines the max rate of job submission per time unit, for example '10sec' eg. max 10 jobs per second or '1/2 s' i.e. 1 job submissions every 2 seconds.
}
